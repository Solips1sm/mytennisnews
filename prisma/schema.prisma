generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Existing models
model Subscription {
  id          String   @id @default(cuid())
  email       String   @unique
  status      String   @default("pending")
  verifiedAt  DateTime?
  createdAt   DateTime @default(now())
}

model IngestedItem {
  id          String   @id @default(cuid())
  sourceKey   String
  externalId  String
  raw         Json
  normalized  Json
  status      String   @default("new")
  createdAt   DateTime @default(now())

  @@unique([sourceKey, externalId])
}

// Reactions per article (anonymous, spam-tolerant). Aggregated counts only.
model ArticleReaction {
  id         String   @id @default(cuid())
  articleId  String   // Sanity _id or slug used by frontend
  type       String   // 'like' | 'dislike'
  count      Int      @default(0)
  updatedAt  DateTime @updatedAt

  @@unique([articleId, type])
}

// Track one reaction per session to enforce min/max=1 per session per article
model ArticleReactionEvent {
  id         String   @id @default(cuid())
  articleId  String
  sessionId  String
  type       String   // 'like' | 'dislike'
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([articleId, sessionId])
}
